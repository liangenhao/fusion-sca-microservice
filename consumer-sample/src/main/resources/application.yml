server:
  port: 9001
spring:
  application:
    name: consumer-sample
  cloud:
    nacos:
      # nacos server 配置文件需开启鉴权：nacos.core.auth.enabled=true
      # 同时nacos server 还需要指定nacos.core.auth.server.identity.key和nacos.core.auth.server.identity.value，
      # 表示当前请求头中包含配置内容，跳过鉴权，用于服务器内部调用不走鉴权认证
      username: nacos
      password: nacos
      discovery:
        # 命名空间ID，用于区分不同环境，默认为public
        #namespace: 911c83a2-bae4-4c78-802a-99dbbbdd66a4 # dev
        server-addr: 127.0.0.1:8848
        # 服务分组，不同的服务可以归类到一个 分组
        group: FUSION_SERVICE_GROUP
        # 虚拟集群，同一个服务下的所有服务实例组成一个默认集群（DEFAULT），可以进一步划分多个虚拟集群
        cluster-name: enhao-local
        # 自定义元数据
        metadata:
          version: 1.0
          env: dev
    loadbalancer:
      # 使用 NacosLoadBalancer 作为负载均衡器，替换 spring-cloud-loadbalancer 中默认的的 RoundRobinLoadBalancer（轮训）
      # NacosLoadBalancer 增加对相同虚拟集群和权重（weight）的判断逻辑。主体还是轮训逻辑
      nacos:
        enabled: true # 默认为false
      cache: # 生产环境需添加 caffeine 依赖，使用 caffeine 替换默认缓存
        enabled: true # 默认 true
        capacity: 256 # 缓存容量
        ttl: 35s # 过期时间
        caffeine: # caffeine.spec有值则覆盖 capacity 和 ttl 配置，格式: key1=value1,key2=value2 详见 com.github.benmanes.caffeine.cache.CaffeineSpec.configure
          spec: "initialCapacity=200,expireAfterWrite=10s"
    circuitbreaker:
      sentinel:
        enabled: true # 默认 true，开启 Sentinel 对 Spring Cloud circuitbreaker 标准的实现
    sentinel:
      enabled: true # 默认 true
      eager: true # 默认 false，是否在 Spring 容器启动时就初始化。默认在第一次调用时初始化
      http-method-specify: true # 默认 false，是否添加 http method 前缀
      web-context-unify: true # 默认为 true，流控模式如果是链路，需要配置成 false
      transport:
        port: 8719 # 启动一个 Http Server，该 Server 会与 Sentinel 控制台做交互。如果端口被占用，会自动+1，直到找到未被占用的端口
        dashboard: localhost:8080
        heartbeat-interval-ms: 5000 # 与控制台心跳间隔
      filter:
        enabled: true # 默认 true，是否开启对 Spring webmvc 的拦截器
        url-patterns: # 拦截器拦截路径
          - '/**'
      log:
        dir: logs/${spring.application.name}
      datasource: # 动态数据源，需对 sentinel-dashboard 做改造，详见 https://github.com/liangenhao/Sentinel/tree/master/sentinel-dashboard
        ds-flow:
          nacos:
            username: ${spring.cloud.nacos.username}
            password: ${spring.cloud.nacos.password}
            server-addr: 127.0.0.1:8848
            group-id: SENTINEL_RULES_CONFIG_GROUP # 特别注意: 这里是 group-id，不是 group，和 spring.cloud.nacos.config 的配置 key 是不同的！
            data-type: json # 支持: json、xml、custom，当为 custom 时，指定 converter-class 配置项，写类全路径名
            rule-type: flow # 流控规则
            data-id: ${spring.application.name}-flow-rules
        ds-degrade:
          nacos:
            username: ${spring.cloud.nacos.username}
            password: ${spring.cloud.nacos.password}
            server-addr: 127.0.0.1:8848
            group-id: SENTINEL_RULES_CONFIG_GROUP
            data-type: json
            rule-type: degrade # 熔断规则
            data-id: ${spring.application.name}-degrade-rules

# sentinel 集群流控
sentinel-cluster:
  enabled: true
  cluster-client-config-data-id: ${spring.application.name}-cluster-client-config
  cluster-map-data-id: ${spring.application.name}-cluster-map

# sentinel dashboard 目前不支持集群部署
# todo 监控数据持久化
# todo 网关流控

# sentinel 对 feign 的支持
feign:
  circuitbreaker: # Spring Cloud Circuitbreaker 标准实现
    enabled: true # 默认 false
  sentinel: # seintinel 的实现
    enabled: false # 默认 false
    # 下面的部分是 Spring Cloud Circuitbreaker 适配实现用到的配置
    # 注意：
    # 当 feign.sentinel.enabled=true 时，表示使用 Sentinel 作为 feign 的断路器，不是 Spring Cloud Circuitbreaker 的标准实现，下面配置无效，熔断配置使用上面动态数据源的配置。
    # 只有当 feign.sentinel.enabled=false 且 feign.circuitbreaker.enabled=true 且 spring.cloud.circuitbreaker.sentinel.enabled=true 时，表示走 Spring Cloud Circuitbreaker 的实现，下面的配置才有效。
    # 当 feign.sentinel.enabled=false 且 feign.circuitbreaker.enabled=false 时，表示不使用断路器。
    default-rule: default # 默认规则名称
    enable-refresh-rules: true
    rules: # Map<资源名称, List<熔断规则>>
      "[provider-sample#echo(String)]": # 规则: {feignClientName}#{方法签名}，注意：如果包含特殊字符时，需要使用[]扩起来，详见 https://github.com/spring-projects/spring-boot/wiki/Relaxed-Binding-2.0#maps
        - resource: "provider-sample#echo(String)" # 资源名
          grade: 2 #  熔断策略，0: 慢调用比例（默认），1: 异常比例，2: 异常数
          count: 1 # 慢调用比例模式下为慢调用临界 RT ms（超出该值计为慢调用）；异常比例/异常数模式下为对应的阈值
          limitApp: "default" # 调用来源
          timeWindow: 5 # 熔断时长，单位为 s
          minRequestAmount: 2 # 熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断（1.7.0 引入）
          statIntervalMs: 1000 # 统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）
          slowRatioThreshold: 1.0d # 慢调用比例阈值，仅慢调用比例模式有效（1.8.0 引入）

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: '*'

fusion:
  env-key: default1
